// Applies an eta reduction:
// (x => (T x)) => T -- if x isn't free in T

const Synt = require("./moon-syntax");

const nil  = (c,n) => n;
const cons = (h,t) => (c,n) => c(h,(t(c,n)));
const conc = (a,b) => (c,n) => a(c,b(c,n));
const bind = (v,a) => (c,n) => a((h,t) => h === v ? t : c(h, t), n);
const free = (v,a) => a((h,t) => h === v ? 1 : t, 0);
const V = 0, A = 1;

const etaReduce = term => term({
  App: ([fv,fm,f], [xv,xm,x]) => [
    conc(fv, xv),
    xm[0] === V && !free(xm[1], fv) ? [A, f, xm[1]] : [],
    T => T.App(f(T), x(T))
  ],

  Lam: (v, [bv,bm,b]) => [
    bind(v, bv),
    bm[0] === A ? [A, T => T.Lam(v, bm[1](T)), bm[2]] : [],
    bm[0]Â === A && bm[2] === v ? bm[1] : T => T.Lam(v, b(T))
  ],

  Var: v => [
    cons(v, nil),
    [V, v],
    T => T.Var(v)
  ],

  Ref: v => [
    nil,
    [],
    T => T.Ref(v)
  ],

  Let: (v, [tv,tm,t], [bv,bm,b]) => [
    conc(tv, bind(v, bv)),
    [],
    T => T.Let(v, t(T), b(T))
  ],

  Fix: (v, [bv,bm,b]) => [
    bind(v, bv),
    [],
    T => T.Fix(b(T))
  ],

  Pri: (op, args) => [
    args.reduce((v,[av,am,a]) => conc(av, v), nil),
    [],
    T => T.Pri(op, args.map(([av,am,a]) => a(T)))
  ],

  Num: num => [
    nil,
    [],
    T => T.Num(num)
  ],

  Str: str => [
    nil,
    [],
    T => T.Str(str)
  ],

  Map: kvs => [
    kvs.reduce((v,[k,[xv,xm,x]]) => conc(xv,v), nil),
    [],
    T => T.Map(kvs.map(([k,[xv,xm,x]]) => [k, x(T)]))
  ]

})[2];




var t = Synt.termFromString(`
(get {
  get: zb2rhjfCUgfysNDVs2pTuMw9Um8hRbGyYdsjKCaMTceKAGDSG
  len: zb2rhj31DmWEQi2c9stdR1r8wfFboPeFCEdXNysWKikEx3QHy
  ifoldl: zb2rhXGcmKQVvCtxws32SbxXXifiXTiRcvey35VzptSDBKcog
  ifoldr: zb2rhXLdKusfYqBUMf1PTKp29ZZdEgV6GWftDBFBrr7EssWFj
  foldl: zb2rhjnAzkjkikNcjbZkYHf9fobZ6CUgURzNcr2HEEs9fYDRu
  foldr: zb2rhm3gQLzX2mYD1MVzxC3fGddhGX4dvkhUFeTN9k3fsA48J
  zipWith: zb2rhhSkBSHtVk6dNL1kw3qcf2nrdyYfqpUCqbVqXC4ewcUyP
  generate: zb2rhgaF7EwthQmhaMMqTA5XZZJQyKbCzgRqKEKYHvC6ZXYJV
  map: zb2rhXAGWV4CvSjMCzinpPvsvPSbPCUjah4YKGdfhx5BgbjPK
  concat: zb2rhcbAzJTfU5R9mT499fiywCCS8MhYP8NEyxxUvu4DMfCg6
  flatten: zb2rhjeLWGCyUFLwN2dTtSZ99uzD88e1shnudCyZz1E1G3JeV
  flatMap: zb2rhjQmx5Yp37eqqKzY9Zkb7gjUpw5cDYLhyfUTtTUx7ek2A
  reverse: zb2rhbtyXTUvLPqAkw8tzfkEvprcUnfsUekR99aV9jj8KVvAT
  range: zb2rhmAtdKxAfhcH1t2H3qJosFTtrEeVFRmncuefcNdjN3uYf
  toList: zb2rhiENzFsgXby26Tphue619TMGsjcagqi1ncVf97Yz8xHYZ
  join: zb2rhkJRCAqHZNwpn7QPuKhR8RV9Z8HHebR6nH3Q7ocBxQ7L5
  sum: zb2rhjR6Xwheqn5rUyY1zv7Vh3JkHm1VnJr5RPWyJqbUP7G27
  dot: zb2rhcdsVRwBw7cbTAtiPGKAPphw9zdbqpUqLAaYohfYbtnx6
  crossWith: zb2rhitmfHXbgKpUQSzrptEWxoimbUJr1wmXQZ2EwxpqVXGsM
})`)

console.log(Synt.termToString(etaReduce(t)));


module.exports = etaReduce;
